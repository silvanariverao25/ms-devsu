package com.banco.mscuentas.api.controller;

import java.net.URI;
import java.util.UUID;

import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.PutMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RestController;

import com.banco.mscuentas.api.dto.CuentaCreateRequest;
import com.banco.mscuentas.api.dto.CuentaResponse;
import com.banco.mscuentas.api.dto.CuentaUpdateRequest;
import com.banco.mscuentas.application.cuenta.CreateCuentaUseCase;
import com.banco.mscuentas.application.cuenta.GetCuentaUseCase;
import com.banco.mscuentas.application.cuenta.ListCuentasUseCase;
import com.banco.mscuentas.application.cuenta.UpdateCuentaUseCase;

import jakarta.validation.Valid;

@RestController
@RequestMapping("/cuentas")
public class CuentaController {

    private final CreateCuentaUseCase createUC;
    private final GetCuentaUseCase getUC;
    private final ListCuentasUseCase listUC;
    private final UpdateCuentaUseCase updateUC;

    public CuentaController(CreateCuentaUseCase createUC,
                            GetCuentaUseCase getUC,
                            ListCuentasUseCase listUC,
                            UpdateCuentaUseCase updateUC) {
        this.createUC = createUC;
        this.getUC = getUC;
        this.listUC = listUC;
        this.updateUC = updateUC;
    }

    /**
     * Crear cuenta
     * - Valida DTO con @Valid
     * - Devuelve 201 Created con Location: /cuentas/{id}
     */
    @PostMapping
    public ResponseEntity<CuentaResponse> create(@Valid @RequestBody CuentaCreateRequest req) {
        var res = createUC.handle(req);
        return ResponseEntity
                .created(URI.create("/cuentas/" + res.cuentaId()))
                .body(res);
    }

    /**
     * Obtener cuenta por ID (UUID)
     * GET /cuentas/{id}
     */
    @GetMapping("/{id}")
    public CuentaResponse getById(@PathVariable UUID id) {
        return getUC.byId(id);
    }

    /**
     * Obtener listado de cuentas
     * GET /cuentas 
     */
    @GetMapping()
    public Page<CuentaResponse> list(Pageable pageable) {
        return listUC.handle(pageable);
    }  
    
    /**
     * Obtener cuenta por n√∫mero
     * GET /cuentas?numero=001-000-0001
     * El "params" evita conflicto con el GET general.
     */
    @GetMapping(params = "numero")
    public CuentaResponse getByNumero(@RequestParam String numero) {
        return getUC.byNumero(numero);
    }

    /**
     * Actualizar tipo/estado de la cuenta
     * PUT /cuentas/{id}
     */
    @PutMapping("/{id}")
    public CuentaResponse update(@PathVariable UUID id,
                                 @Valid @RequestBody CuentaUpdateRequest req) {
        return updateUC.handle(id, req);
    }
}
